import React, { useMemo, useRef, useState } from "react";

/**
 * Adaptive Tutor – Multi‑Subject (Canvas‑safe)
 * - Works inside Canvas without external workers/CDNs
 * - PDF text extraction via lazy pdfjs import with disableWorker=true
 * - Abbreviation‑aware sentence splitter (no lookbehind)
 * - Multiple subjects; each has its own sources & chat
 * - Native, clickable <input type="file"> + <label> for reliable file picking in sandboxed iframes
 */

// ------------------------------ Utils ------------------------------
const uid = () => Math.random().toString(36).slice(2, 9);

const ABBREV = new Set([
  "e.g.", "i.e.", "etc.", "vs.", "cf.", "al.",
  "mr.", "mrs.", "ms.", "dr.", "prof.", "sr.", "jr.",
  "u.s.", "u.k.", "a.m.", "p.m.", "no.", "fig.", "eq.", "approx."
]);

function splitSentences(text) {
  const s = (text || "").replace(/\r/g, "").replace(/\s+/g, " ").trim();
  if (!s) return [];
  const out = []; let start = 0;
  for (let i = 0; i < s.length; i++) {
    const ch = s[i];
    if (ch === '.' || ch === '!' || ch === '?') {
      const frag = s.slice(Math.max(0, i - 6), i + 1).toLowerCase();
      if ([...ABBREV].some(ab => frag.endsWith(ab))) continue;
      out.push(s.slice(start, i + 1).trim());
      while (i + 1 < s.length && s[i + 1] === ' ') i++;
      start = i + 1;
    }
  }
  if (start < s.length) out.push(s.slice(start).trim());
  return out.filter(Boolean);
}

function chunkText(text, maxChars = 1000) {
  const sentences = splitSentences(text);
  const chunks = []; let cur = "";
  for (const sent of sentences) {
    if ((cur + " " + sent).trim().length > maxChars && cur) {
      chunks.push(cur.trim()); cur = sent;
    } else { cur = (cur ? cur + " " : "") + sent; }
  }
  if (cur.trim()) chunks.push(cur.trim());
  return chunks;
}

// Basic relevance scoring
function tokenize(s) {
  return (s || "").toLowerCase().replace(/[^a-z0-9\s]/g, " ").split(/\s+/).filter(Boolean);
}
function scoreChunk(query, chunkText) {
  const q = tokenize(query), c = tokenize(chunkText);
  if (!q.length || !c.length) return 0;
  let score = 0; const tf = new Map();
  c.forEach(t => tf.set(t, (tf.get(t) || 0) + 1));
  q.forEach(t => (score += tf.get(t) || 0));
  if (chunkText.toLowerCase().includes(query.toLowerCase())) score += 2;
  return score;
}

// Two‑column reading order heuristic
function reconstructReadingOrder(items) {
  if (!items.length) return "";
  const xs = items.map(it => it.x).sort((a,b)=>a-b);
  const minX = xs[0], maxX = xs[xs.length-1];
  const spread = Math.max(1, maxX - minX);
  let threshold = minX + spread/2;
  const bins = 24; const hist = new Array(bins).fill(0);
  xs.forEach(x => { const idx = Math.min(bins-1, Math.max(0, Math.floor(((x - minX)/spread)*bins))); hist[idx]++; });
  let bestIdx = Math.floor(bins/2), bestScore = Infinity;
  for (let i=1;i<bins-1;i++) { const score = hist[i-1]+hist[i]+hist[i+1]; if (score < bestScore) { bestScore = score; bestIdx=i; } }
  threshold = minX + (bestIdx/bins)*spread;
  const left=[], right=[]; items.forEach(it => (it.x <= threshold ? left : right).push(it));
  const sortCol = arr => arr.sort((a,b)=>(b.y-a.y)||(a.x-b.x)).map(it=>it.str).join(' ');
  if (right.length < items.length*0.15) return sortCol(items);
  return [sortCol(left), sortCol(right)].filter(Boolean).join("\n\n");
}

async function extractTextFromPDF(file) {
  // Lazy import pdfjs; keep worker disabled so no external fetch
  let pdfjs;
  try { pdfjs = await import(/* @vite-ignore */ 'pdfjs-dist/legacy/build/pdf'); }
  catch { pdfjs = await import(/* @vite-ignore */ 'pdfjs-dist/build/pdf'); }
  const buf = await file.arrayBuffer();
  const pdf = await pdfjs.getDocument({ data: buf, disableWorker: true }).promise;
  let full = "";
  for (let i=1;i<=pdf.numPages;i++) {
    const page = await pdf.getPage(i);
    const content = await page.getTextContent({ normalizeWhitespace: true });
    const items = content.items
      .map(it => ({ str: it.str || '', x: it.transform?.[4] || 0, y: it.transform?.[5] || 0 }))
      .filter(it=>it.str && it.str.trim());
    full += reconstructReadingOrder(items) + "\n\n";
  }
  return full.trim();
}

// ------------------------------ Component ------------------------------
export default function AdaptiveTutorCanvasSafe() {
  // subjects: { id, name, sources: [{id, name, chunks:string[]}], chat: [{role,text}] }
  const [subjects, setSubjects] = useState([{ id: uid(), name: 'General', sources: [], chat: [] }]);
  const [activeId, setActiveId] = useState(subjects[0].id);
  const active = useMemo(() => subjects.find(s => s.id === activeId) || subjects[0], [subjects, activeId]);

  const fileInputId = "file-input-" + activeId;
  const subjectNameRef = useRef(null);
  const [input, setInput] = useState("");
  const [testing, setTesting] = useState("");

  function addSubject() {
    const name = subjectNameRef.current?.value?.trim() || prompt('Subject name?') || '';
    if (!name) return;
    const s = { id: uid(), name, sources: [], chat: [] };
    setSubjects(prev => [...prev, s]);
    setActiveId(s.id);
    if (subjectNameRef.current) subjectNameRef.current.value = '';
  }

  function renameSubject(id) {
    const name = prompt('Rename subject to?', subjects.find(s=>s.id===id)?.name || '') || '';
    if (!name) return;
    setSubjects(prev => prev.map(s => s.id === id ? { ...s, name } : s));
  }

  function removeSubject(id) {
    if (subjects.length <= 1) return alert('Keep at least one subject.');
    const idx = subjects.findIndex(s => s.id === id);
    const next = subjects.filter(s => s.id !== id);
    setSubjects(next);
    if (id === activeId) setActiveId(next[Math.max(0, idx-1)].id);
  }

  async function handleFiles(e) {
    const files = Array.from(e.target.files || []);
    if (!files.length) return;
    const newSources = [];
    for (const file of files) {
      let text = '';
      if (file.type === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf')) {
        try { text = await extractTextFromPDF(file); } catch { text = ''; }
      } else {
        text = await file.text();
      }
      const chunks = chunkText(text);
      newSources.push({ id: uid(), name: file.name.replace(/\.[^.]+$/, ''), chunks });
    }
    setSubjects(prev => prev.map(s => s.id === activeId ? { ...s, sources: [...s.sources, ...newSources] } : s));
    // clear the input so re‑selecting the same file triggers onChange
    e.target.value = '';
  }

  function respond(query) {
    if (!query.trim()) return;
    const hits = [];
    active.sources.forEach(src => {
      src.chunks.forEach((c, i) => { if (c.toLowerCase().includes(query.toLowerCase())) hits.push({ src: src.name, idx: i+1, text: c }); });
    });
    const reply = hits.length
      ? hits.map(h => `From ${h.src} (Chunk ${h.idx}): ${h.text}`).join('\n\n')
      : 'No matching content found in your uploaded sources.';
    setSubjects(prev => prev.map(s => s.id === activeId ? { ...s, chat: [...s.chat, { role:'user', text: query }, { role:'assistant', text: reply }] } : s));
  }

  function runTests(){
    const lines = [];
    const ss = splitSentences('We met at 10 a.m. in the U.S. He said, e.g., to try again. End.');
    lines.push(`[T1] sentences ${ss.length} (expect 2–3): ${ss.length>=2&&ss.length<=3?'OK':'CHECK'}`);
    const chunks = chunkText('A. '.repeat(800), 200);
    lines.push(`[T2] chunks>=3: ${chunks.length>=3?'OK':'FAIL'} (${chunks.length})`);
    const items = [
      {str:'L1',x:50,y:700},{str:'L2',x:50,y:600},{str:'L3',x:50,y:500},
      {str:'R1',x:350,y:700},{str:'R2',x:350,y:600},{str:'R3',x:350,y:500},
    ];
    const ro = reconstructReadingOrder(items);
    lines.push(`[T3] reading‑order has both cols: ${(ro.includes('L1') && ro.includes('R1'))?'OK':'FAIL'} → ${ro}`);
    setTesting(lines.join('\n'));
  }

  return (
    <div className="min-h-screen bg-gray-50 text-gray-900">
      <header className="sticky top-0 z-10 bg-white/80 backdrop-blur border-b border-gray-200">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
          <h1 className="text-lg md:text-xl font-semibold">Adaptive Tutor – Multi‑Subject (Canvas‑safe)</h1>
          <div className="flex items-center gap-2">
            <button className="px-3 py-1.5 rounded-xl border" onClick={runTests}>Run tests</button>
          </div>
        </div>
      </header>

      <main className="max-w-6xl mx-auto px-4 py-6 grid grid-cols-1 md:grid-cols-12 gap-4">
        {/* SUBJECT LIST */}
        <aside className="md:col-span-3 bg-white border rounded-2xl p-3 space-y-3">
          <div className="flex items-center gap-2">
            <input ref={subjectNameRef} className="flex-1 px-2 py-1 border rounded-lg" placeholder="New subject name" />
            <button className="px-2.5 py-1 rounded-lg border" onClick={addSubject}>Add</button>
          </div>
          <ul className="space-y-1 mt-2">
            {subjects.map(s => (
              <li key={s.id} className={`flex items-center gap-2 p-2 rounded-xl border ${s.id===activeId?'bg-gray-100 border-gray-300':'bg-white'}`}>
                <button className="flex-1 text-left" onClick={()=>setActiveId(s.id)}>
                  <div className="text-sm font-medium">{s.name}</div>
                  <div className="text-xs text-gray-500">{s.sources.length} source(s), {s.chat.length} msg(s)</div>
                </button>
                <button className="text-xs px-2 py-1 border rounded-lg" onClick={()=>renameSubject(s.id)}>Rename</button>
                <button className="text-xs px-2 py-1 border rounded-lg" onClick={()=>removeSubject(s.id)}>✕</button>
              </li>
            ))}
          </ul>
        </aside>

        {/* ACTIVE SUBJECT WORKSPACE */}
        <section className="md:col-span-9 space-y-4">
          <div className="bg-white border rounded-2xl p-4">
            <div className="flex flex-wrap items-center gap-3">
              <label htmlFor={fileInputId} className="px-3 py-1.5 rounded-xl border cursor-pointer select-none">Upload (.pdf / .txt)</label>
              <input id={fileInputId} type="file" multiple accept=".pdf,.txt,.md,.json" onChange={handleFiles} className="block" />
              <div className="text-xs text-gray-500">Tip: type subject name above, click Add, then upload files.</div>
            </div>
            {active.sources.length? (
              <div className="mt-3 grid md:grid-cols-2 gap-3">
                {active.sources.map(src => (
                  <details key={src.id} className="p-2 border rounded-xl">
                    <summary className="cursor-pointer text-sm font-medium">{src.name} <span className="text-gray-500">· {src.chunks.length} chunks</span></summary>
                    <div className="mt-2 max-h-40 overflow-auto text-sm space-y-2">
                      {src.chunks.slice(0,6).map((c,i)=>(
                        <div key={i} className="p-2 bg-gray-50 rounded-xl border">
                          <div className="text-xs text-gray-500 mb-1">Chunk {i+1}</div>
                          <div>{c.slice(0,240)}{c.length>240?'…':''}</div>
                        </div>
                      ))}
                      {src.chunks.length>6 && <div className="text-xs text-gray-500">(+{src.chunks.length-6} more)</div>}
                    </div>
                  </details>
                ))}
              </div>
            ) : <p className="text-sm text-gray-600 mt-2">Add sources to ground this subject's tutor.</p>}

            {testing && <pre className="mt-3 text-xs bg-gray-50 border rounded-xl p-2 whitespace-pre-wrap">{testing}</pre>}
          </div>

          <div className="bg-white border rounded-2xl p-4 h-[65vh] flex flex-col">
            <div className="flex-1 overflow-auto space-y-2 pr-1">
              {active.chat.length===0 && <div className="text-sm text-gray-600">Ask about your sources (e.g., "Explain X and quiz me").</div>}
              {active.chat.map((m,i)=> (
                <div key={i} className={`p-2 rounded-xl border ${m.role==='user'?'bg-blue-50 border-blue-200':'bg-gray-50 border-gray-200'}`}>
                  <div className="text-xs uppercase text-gray-500 mb-1">{m.role}</div>
                  <div className="text-sm whitespace-pre-wrap">{m.text}</div>
                </div>
              ))}
            </div>
            <form onSubmit={(e)=>{e.preventDefault(); respond(input); setInput('');}} className="mt-3 flex gap-2">
              <input className="flex-1 px-3 py-2 rounded-xl border" placeholder={active.sources.length?`Ask about ${active.name}…`:'Upload or paste a source first…'} value={input} onChange={e=>setInput(e.target.value)} />
              <button className="px-4 py-2 rounded-xl bg-gray-900 text-white disabled:opacity-40" disabled={!active.sources.length || !input.trim()}>Send</button>
            </form>
          </div>
        </section>
      </main>
    </div>
  );
}

